name: Cache Node and NPM Dependencies
description: This action allows to cache both Node and NPM dependencies based on the package-lock.json file

inputs:
  node-version:
    description: NodeJS version to use
    default: 23.x
    required: false
  working-dir:
    description: The working directory of the application
    default: .
    # . → current directory
    required: false
  target-env:
    description: '"dev" or "prod". Controls whether dev dependencies are installed'
    # dev dependencies와 관련된 action(cache actioon, npm ci)를 생략할수 있는 옵션
    # 왜냐면 nodejs app을 prod에 deploy할때, testing/linting/formatting같이 생략할 수 있는
    # 액션들이 많기 때문이다 (따라서 npm ci를 또 돌려줄 필요가 없다)
    default: dev
    required: false

runs:
  using: composite
  steps:
    - name: Setup NodeJS version ${{inputs.node-version}}
      uses: actions/setup-node@v3
      with:
        # with은 step에 전달할 매개변수(parameter)를 지정하는 역할
        # 따라서 actions/setup-node@v3는 node-version값에 따라 지정된 버전 설치
        node-version: ${{inputs.node-version}}
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: ${{inputs.working-dir}}/node-modules
        # [문법] ${{}}는 중첩으로 사용할 수 없다
        # 대신 format()을 대신 사용한다
        key: node-modules-${{hashFiles(format('{0}/{1}',inputs.working-dir, 'package-lock.json'))}}
    - name: Install dependencies
      if: ${{steps.cache.outputs.cache-hit != 'true'}}
      # --omit='env': 해당 env환경이면 skip(npm ci를 진행하지 않는다다)
      run: ${{inputs.target-env == 'dev' && 'npm ci' || 'npm ci --omit=dev'}}
      shell: bash
      working-directory: ${{inputs.working-dir}}
